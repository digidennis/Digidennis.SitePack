prototype(Neos.Neos:ContentCollection){
    attributes.class.@process.collectionClass = Neos.Fusion:Case {
        @context.collectionClass = 'neos-contentcollection'
        classIsString {
            condition = ${Type.isString(value)}
            renderer = ${String.trim(value + ' ' + collectionClass + ' ' + q(node).property('class'))}
        }

        classIsArray {
            condition = ${Type.isArray(value)}
            renderer = ${Array.push(value, collectionClass) + Array.push(value,q(node).property('class'))}
        }
    }
}

prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn) {
    attributes.class = 'row'
    columns.iterationName = 'multiColumnIteration'
    prototype(Neos.NodeTypes.ColumnLayouts:MultiColumnItem) {
        attributes.class =  Neos.Fusion:RawArray {
            normal = ${'col-' + q(node).parent().property('breakpoint') + '-' + String.split(q(node).parent().property('layout'), '-')[multiColumnIteration.index]}
            break = Neos.Fusion:Case{
                isLastNotSmall{
                    condition = ${multiColumnIteration.index == 2 && q(node).parent().property('breakpoint') != 'sm'}
                    renderer = ${'col-sm-12'}
                }
                1or2NotSmall{
                    condition = ${multiColumnIteration.index < 2 && q(node).parent().property('breakpoint') != 'sm'}
                    renderer = ${'col-sm-6'}
                }
                @if.shouldbreak = ${q(node).parent().property('smallbreak')}
            }
            collectionclass =  ${node.properties.class}
        }
    }
}
